name: Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: write # needed to create releases

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          draft: true
          prerelease: false

  build:
    needs: ["create-release"]
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - cs341/mp-shell
          - cs341/mp-malloc
          - cs341/mp-password-cracker
          - cs341/mp-parallel-make
          - cs341/mp-finding-filesystems

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build ${{ matrix.path }}
        id: build
        shell: bash
        run: |
          converted_path=$(echo "${{ matrix.path }}" | sed 's/\//-/g')
          echo "file_name=$converted_path" >> $GITHUB_OUTPUT
          mkdir staging
          cd ${{ matrix.path }}
          mv ${GITHUB_WORKSPACE}/LICENSE.txt LICENSE_Timothys_Tips.txt
          if [ -f README.md ]; then
            mv README.md README_Timothys_Tips.md
          fi
          tar -cf ${GITHUB_WORKSPACE}/staging/${converted_path}.tar $(find . -name '*' -printf '%P\n')
          zip -r ${GITHUB_WORKSPACE}/staging/${converted_path}.zip .

      - name: Upload tar to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: staging/${{ steps.build.outputs.file_name }}.tar
          asset_name: ${{ steps.build.outputs.file_name }}.tar
          asset_content_type: application/octet-stream

      - name: Upload zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: staging/${{ steps.build.outputs.file_name }}.zip
          asset_name: ${{ steps.build.outputs.file_name }}.zip
          asset_content_type: application/octet-stream

      - name: Upload tar as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.file_name }}.tar
          path: staging/${{ steps.build.outputs.file_name }}.tar

      - name: Upload zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.file_name }}.zip
          path: staging/${{ steps.build.outputs.file_name }}.zip
